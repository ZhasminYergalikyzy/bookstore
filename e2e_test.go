package main

import (
	"fmt"
	"strings"
	"testing"
	"time"

	"github.com/tebeka/selenium"
)

const (
	chromeDriverPath = "/opt/homebrew/bin/chromedriver"
	port             = 4444
	baseURL          = "http://localhost:8080/bouquiniste"
)

func TestE2EBooks(t *testing.T) {
	opts := []selenium.ServiceOption{}
	service, err := selenium.NewChromeDriverService(chromeDriverPath, port, opts...)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ChromeDriver: %v", err)
	}
	defer service.Stop()

	caps := selenium.Capabilities{"browserName": "chrome"}
	driver, err := selenium.NewRemote(caps, fmt.Sprintf("http://localhost:%d/wd/hub", port))
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ WebDriver: %s", err)
	}
	defer driver.Quit()

	// 1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—É–∫–∏–Ω–∏—Å—Ç–∞
	if err := driver.Get(baseURL); err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %s", err)
	}
	time.Sleep(3 * time.Second)

	// 2Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
	viewBooksButton, err := driver.FindElement(selenium.ByID, "read-books-btn")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'View All Books': %s", err)
	}
	viewBooksButton.Click()
	time.Sleep(3 * time.Second)

	// 3Ô∏è‚É£ **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é**
	filterTitleInput, err := driver.FindElement(selenium.ByID, "filter-title")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ title: %s", err)
	}
	filterTitleInput.SendKeys("hp")

	sortByDropdown, err := driver.FindElement(selenium.ByID, "sort-by")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω dropdown 'Sort by': %s", err)
	}
	sortByDropdown.SendKeys("Title")

	applyFiltersButton, err := driver.FindElement(selenium.ByID, "apply-filters")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 'Apply': %s", err)
	}
	applyFiltersButton.Click()
	time.Sleep(5 * time.Second) // –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã

	// 4Ô∏è‚É£ **–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞**
	booksTable, err := driver.FindElement(selenium.ByID, "books-table")
	if err != nil {
		t.Fatalf("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –∫–Ω–∏–≥–∞–º–∏: %s", err)
	}

	booksText, _ := booksTable.Text()
	fmt.Println("üìö –¢–µ–∫—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ:", booksText) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "hp" –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
	if !containsIgnoreCase(booksText, "hp") {
		t.Errorf("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ! –û–∂–∏–¥–∞–ª–∞—Å—å 'hp'. –¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç: %s", booksText)
	}
}

// **–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)**
func containsIgnoreCase(source, substr string) bool {
	return strings.Contains(strings.ToLower(source), strings.ToLower(substr))
}


